
=== example.py ===

The provided code creates a video from an image using the MoviePy library and dynamic movement effects. It sets parameters such as frame rate, duration, resolution, and image path. The image is resized to ensure it meets a minimum upscale requirement of 1.5 times the final video resolution. A temporary resized image is saved, and a dynamic position clip is generated using a movement model loaded from a JSON file. Finally, the composite video is saved to a specified output path, and the temporary image file is deleted.


=== mapling_models/spline_data_hook.json ===

The data consists of three sets of values: x_values, y_values, and z_values. The x_values are [4, 193, 280, 519, 855, 803, 463], corresponding to y_values [3, 287, 670, 955, 823, 513, 397]. The z_values range from 0.0 to 10.0, with specific increments indicating a potential relationship or trend among the x and y values.


=== license.txt ===

Kevin Z Wong grants permission to use, copy, modify, and distribute the software without restrictions, provided that the copyright notice and permission notice are included in all copies. The software is offered "as is" without any warranties, and the authors are not liable for any claims or damages related to its use.


=== PathCreator.py ===

The provided code is a Python script that utilizes the Tkinter library for a graphical user interface (GUI) to select points representing a path for an image. Users are prompted to select points, which are then processed to create a 3D spline model using the Spline3D class. After selecting the path points, users can adjust speed values through a slider interface. The script collects these inputs, constructs a 3D spline, visualizes it, and allows users to save the model with a specified name. Key libraries used include NumPy for numerical operations, SciPy for interpolation and optimization, and Matplotlib for plotting.


=== TimeAdjustment.py ===

The provided code defines a `SliderApp` class using Tkinter to create a graphical user interface (GUI) that features a slider for selecting time intervals between given points. The class initializes with specified length effects and a list of points, calculates intervals based on these inputs, and sets up the slider and a label for user instructions. A "Done" button allows users to finalize their selections, which triggers the application to close. The slider's values can be retrieved through the `get_slider_values` method. The application is launched in the main block, displaying the slider and allowing user interaction.


=== tkSliderWidget.py ===

The Mapling project utilizes a Tkinter widget created by Mengxun Li, which can be found on GitHub. The code defines a `Slider` class that inherits from `Frame`, allowing users to create a customizable slider interface. Key features include adjustable parameters for width, height, minimum and maximum values, step size, and the ability to show or hide values. The slider supports multiple bars, which can be moved within a defined range. The class includes methods for handling mouse events, updating bar positions, and calculating values based on user interactions. It also provides a callback mechanism for value changes. The slider's visual elements, such as lines and bars, are drawn on a canvas, ensuring a user-friendly experience.


=== DynamicEffects.py ===

The provided code defines a class `DynamicPositionClip` that creates a video where an image moves dynamically based on a specified movement model. The class initializes with parameters for frame rate, background width, and height. The `dynamicPosition` method calculates the image's position at a given time `t`, scaling the movement values to fit within the video frame while adjusting for the image's dimensions. The `generate_video` method creates a video clip by overlaying the image on a colored background, using the movement model to determine the image's position throughout the clip's duration. In the main block, the class is instantiated with specific parameters, a movement model is loaded from a JSON file, and the video is generated and saved to a specified output path.


=== README.md ===

Mapling is a video animation tool that transforms images into videos with customizable pan movements. It enlarges images to 150% of the video resolution and animates them at 60 frames per second using a customizable 3D spline graph for smooth movement paths. Users can create unique movement paths by running the PathCreator.py program, utilizing a GUI to select and adjust points for the desired motion. 

To install Mapling, users need Python 3.7+, pip, and a virtual environment. The installation involves cloning the repository and installing dependencies. After setting up, users can run examples to generate videos.

For custom movements, users create paths, adjust time intervals for speed, preview in 3D, and save their models. To use a custom model, users run Mapling.py, set video parameters via a GUI, select an image and model, and finalize the video for saving in the designated folder.


=== mapling_models/spline_data_loop.json ===

The provided data consists of three sets of values: x_values, y_values, and z_values. 

- **x_values**: [7, 317, 599, 678, 520, 325, 394, 648, 991]
- **y_values**: [-1, 113, 383, 715, 900, 800, 396, 212, 5]
- **z_values**: [0.0, 1.5, 3.66, 4.5, 4.89, 5.39, 6.29, 8.0, 10.0]

These values could represent a dataset for analysis, possibly indicating a relationship between the x and y values, with z values providing additional context or measurement.


=== PointSelection.py ===

The provided code defines a graphical user interface (GUI) application using Tkinter for selecting points on a canvas. The `PointSelectionApp` class initializes a canvas with labeled axes, where users can click to add points. It includes features such as:

- A canvas for drawing points and axis lines.
- Mouse event bindings to add points and update cursor lines.
- A listbox to display the coordinates of selected points.
- Buttons to clear points or finalize the selection.

Key functionalities include:
- `add_point`: Captures mouse clicks, scales coordinates, and displays them.
- `update_lines`: Updates cursor-following lines based on mouse movement.
- `clear_points`: Resets the canvas and clears the points list.
- `finalize_points`: Closes the app and can handle final actions on point selection.

The application allows users to interactively select points and view their coordinates in a structured format.


=== Spline3D.py ===

The provided code defines a `Spline3D` class that facilitates the creation and manipulation of 3D cubic splines using given x, y, and z points. Key functionalities include initializing spline data, plotting the 3D spline, finding x and y coordinates for a specified z value, and saving/loading spline data in JSON format.

### Key Features:
1. **Initialization**: Accepts x, y, and z points, creating cubic spline interpolations for each dimension.
2. **3D Plotting**: Uses Matplotlib to visualize the spline in a 3D space.
3. **Z-Value Queries**: Implements a method to find corresponding x and y values for a given z input using optimization.
4. **Data Management**: Provides methods to save the spline data to a JSON file and load it back, handling file creation and overwriting scenarios.
5. **Naming Convention**: Generates a unique model name based on the current timestamp.

### Example Usage:
The script initializes a `Spline3D` object with predefined path and speed points, plots the spline, and allows the user to save the data with a custom name. It also includes commented-out code for querying x and y values for a specific z input.


=== Mapling.py ===

The provided code is a Python script that utilizes the EasyGUI library for user input and the MoviePy library for video creation. It prompts users to enter video settings such as frame rate, clip duration, resolution, video name, and upscale factor. After validating the input, it allows users to select an image and a mapping model file, and choose a folder to save the output video. The script then resizes the selected image based on the specified upscale factor and resolution, generates a dynamic video using a movement model, and saves the final video as an MP4 file. Temporary files created during the process are deleted afterward.


=== requirements.txt ===

The provided list details specific versions of various Python libraries, which include:

- **easygui** (0.98.3): A simple GUI toolkit for Python.
- **fonttools** (4.47.0): A library for manipulating fonts.
- **imageio** (2.33.1): A library for reading and writing image data.
- **imageio-ffmpeg** (0.4.9): A plugin for imageio to handle FFmpeg video files.
- **matplotlib** (3.8.2): A plotting library for creating static, animated, and interactive visualizations.
- **moviepy** (1.0.3): A library for video editing.
- **numpy** (1.26.2): A fundamental package for numerical computing in Python.
- **opencv-python** (4.8.1.78): A library for computer vision tasks.
- **scipy** (1.11.4): A library for scientific and technical computing.
- **tqdm** (4.66.1): A library for creating progress bars in Python applications. 

These libraries are commonly used in data analysis, image processing, and video editing tasks.


=== license.txt ===

Kevin Z Wong grants permission to use, copy, modify, and distribute his software freely, provided that the copyright and permission notices are included in all copies. The software is offered "as is" without any warranties, and the authors are not liable for any claims or damages related to its use.


=== example.py ===

The provided code creates a video using an image and dynamic movement effects. It imports necessary libraries, sets parameters such as frame rate, clip duration, resolution, and image path. The image is resized based on a specified upscale factor to ensure it meets the minimum resolution requirements. A temporary resized image is saved, and a `DynamicPositionClip` is created to apply movement using data from a JSON file. The final video is generated and saved as an MP4 file, after which the temporary image file is deleted.


=== tkSliderWidget.py ===

The Mapling project incorporates a Tkinter widget created by Mengxun Li, designed for graphical slider functionality. The `Slider` class allows users to create a customizable slider interface with adjustable parameters such as width, height, minimum and maximum values, and step sizes. It supports multiple bars that can be moved along a track, with options for displaying values and enabling/removing bars. The class includes methods for handling mouse events, updating bar positions, and calculating values based on user interactions. Key features include visual customization, event handling for user input, and callbacks for value changes. More details can be found on the project's GitHub page.


=== DynamicEffects.py ===

The provided code defines a `DynamicPositionClip` class that generates a video with a dynamically positioned image based on a movement model. The class initializes with a specified framerate and background dimensions. The `dynamicPosition` method calculates the image's position at a given time `t`, scaling the movement values to fit within the video frame while inverting the y-coordinate if necessary. The `generate_video` method creates a video clip using an image and a background color, applying the movement model to position the image throughout the clip's duration. In the main section, a video is generated using a specified image and movement data from a JSON file, and the final video is saved to a specified output path.


=== PointSelection.py ===

The PointSelectionApp is a graphical user interface built using Tkinter that allows users to select points on a canvas. The application features a 1000x1000 pixel canvas with labeled X and Y axes. Users can click to add points, which are displayed as small circles, and their coordinates are listed in a scrollable listbox. The app includes vertical and horizontal dashed lines that follow the cursor, providing visual guidance. Users can clear all points or finalize their selection with dedicated buttons. The app also supports scaling of coordinates and maintains a list of selected points, which can be retrieved in their original resolution. The application closes upon finalizing the point selection.


=== Mapling.py ===

The provided code is a Python script that utilizes the EasyGUI library for user input and the MoviePy library for video editing. It prompts the user to enter video settings, including frame rate, clip duration, resolution, video name, and upscale factor. The script checks for empty inputs and exits if any are found. It then allows the user to select an image file and a mapping model file, as well as a folder to save the output video.

The script calculates the new dimensions for the image based on the specified upscale factor and resolution, resizing the image using OpenCV. It creates a temporary image file and generates a dynamic video clip using the specified movement model. Finally, it writes the composite video to the specified output path and deletes the temporary image file.


=== mapling_models/spline_data_hook.json ===

The provided data consists of three sets of values: 

1. **x_values**: [4, 193, 280, 519, 855, 803, 463]
2. **y_values**: [3, 287, 670, 955, 823, 513, 397]
3. **z_values**: [0.0, 2.42, 5.24, 7.63, 8.45, 9.16, 10.0]

These values can represent a dataset where x and y values could indicate coordinates or measurements, while z values appear to be derived metrics or indices related to the x and y values. The z_values increase progressively, suggesting a correlation with the x and y values.


=== TimeAdjustment.py ===

The provided code defines a `SliderApp` class using Tkinter, which creates a graphical user interface (GUI) for selecting time intervals between points using a slider widget. The application initializes with a specified length effect and a list of points, calculates intervals based on the length effect, and sets up a slider and label for user interaction. A "Done" button finalizes the selection and closes the application. The slider allows users to adjust values, and the current slider values can be retrieved upon closing the app. The main section of the code creates an instance of the `SliderApp` and starts the Tkinter event loop.


=== PathCreator.py ===

The provided code snippet utilizes the Tkinter library to create a graphical user interface (GUI) for selecting points that represent a path for an image. Users are prompted to select points, which are then processed to extract their coordinates. A second GUI allows users to adjust speed values associated with these points using sliders. The x and y coordinates of the selected points, along with the speed values, are converted into numpy arrays. A 3D spline is generated using the Spline3D class, which is then plotted. Finally, the user is prompted to name the model, and the spline data is saved under that name.


=== mapling_models/spline_data_loop.json ===

The data consists of three sets of values: 

1. **x_values**: [7, 317, 599, 678, 520, 325, 394, 648, 991]
2. **y_values**: [-1, 113, 383, 715, 900, 800, 396, 212, 5]
3. **z_values**: [0.0, 1.5, 3.66, 4.5, 4.89, 5.39, 6.29, 8.0, 10.0]

These values may represent a dataset with three dimensions, where each set corresponds to a different variable. The x_values range from 7 to 991, y_values vary from -1 to 900, and z_values increase from 0.0 to 10.0.


=== README.md ===

Mapling is a video animation tool that transforms images into videos with customizable pan movements. It upscales images to 150% of the video resolution and animates them at 60 frames per second using a customizable 3D spline graph to define movement paths. Users can create unique movement paths by adjusting points on the graph and setting time intervals for speed control.

**Installation Requirements:**
- Python 3.7+, Pip, and a virtual environment are recommended. Users can install the tool by cloning the repository and running the necessary requirements.

**Usage Steps:**
1. **Path Creation:**
   - Run `PathCreator.py` to design custom movement paths using a GUI.
   - Adjust time intervals for speed and finalize the path.
   - Preview the 3D model of camera positions and save the model.

2. **Video Creation:**
   - Execute `Mapling.py` to set video parameters (framerate, duration, resolution).
   - Select the image and the saved Mapling model.
   - Finalize settings and save the resulting video in the designated folder.

This tool allows for complete customization of image movements, making it versatile for various animation projects.


=== requirements.txt ===

The text lists specific versions of various Python libraries, which include:

- **easygui** (0.98.3)
- **fonttools** (4.47.0)
- **imageio** (2.33.1)
- **imageio-ffmpeg** (0.4.9)
- **matplotlib** (3.8.2)
- **moviepy** (1.0.3)
- **numpy** (1.26.2)
- **opencv-python** (4.8.1.78)
- **scipy** (1.11.4)
- **tqdm** (4.66.1)

These libraries are commonly used for tasks related to image processing, numerical computations, and data visualization in Python.


=== Spline3D.py ===

The provided code defines a `Spline3D` class for creating and manipulating 3D cubic spline interpolations based on given x, y, and z points. Key functionalities include:

1. **Initialization**: The class can be initialized with x, y, and z coordinates, which are stored as numpy arrays and used to create cubic spline interpolations.

2. **3D Plotting**: The `plot_3d_spline` method generates a 3D plot of the spline using matplotlib.

3. **Finding Coordinates**: The class includes methods to find the parameter `t` corresponding to a specific z value and to retrieve the corresponding x and y values.

4. **Data Management**: It provides methods for saving the spline data to a JSON file and loading data from an existing JSON file. The `save_data` method includes checks for file overwriting and directory creation.

5. **Example Usage**: In the main block, the class is instantiated with predefined path and speed points, followed by plotting the spline and saving the model data.

Overall, the `Spline3D` class is designed for 3D spline interpolation, visualization, and data management.

